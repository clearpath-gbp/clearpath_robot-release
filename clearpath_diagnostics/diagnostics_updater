#!/usr/bin/env python3

# Software License Agreement (BSD)
#
# @author    Roni Kreinin <rkreinin@clearpathrobotics.com>
# @copyright (c) 2023, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Redistribution and use in source and binary forms, with or without
# modification, is not permitted without the express permission
# of Clearpath Robotics.

import os

from diagnostic_msgs.msg import DiagnosticStatus

from diagnostic_updater import FrequencyStatusParam, HeaderlessTopicDiagnostic, Updater, DiagnosticStatusWrapper

import rclpy
from rclpy.node import Node
from rclpy.qos import qos_profile_sensor_data

from sensor_msgs.msg import BatteryState, Image, Imu, LaserScan, MagneticField, NavSatFix, PointCloud2

from clearpath_generator_common.common import BaseGenerator
from clearpath_config.common.utils.yaml import read_yaml
from clearpath_config.clearpath_config import ClearpathConfig
from clearpath_config.sensors.types.sensor import BaseSensor
from clearpath_config.sensors.types.cameras import BaseCamera, IntelRealsense, FlirBlackfly
from clearpath_config.sensors.types.imu import BaseIMU, CHRoboticsUM6, Microstrain, RedshiftUM7
from clearpath_config.sensors.types.lidars_2d import BaseLidar2D, HokuyoUST, SickLMS1XX
from clearpath_config.sensors.types.lidars_3d import BaseLidar3D, VelodyneLidar
from clearpath_config.sensors.types.gps import BaseGPS, SwiftNavDuro, NMEA

from clearpath_platform_msgs.msg import Status

from typing import List
from apt import Cache, Version


class ClearpathDiagnosticUpdater(Node):
    def __init__(self, setup_path: str = '/etc/clearpath/'):
        super().__init__('clearpath_diagnostics_updater')
        self.setup_path = setup_path

        # Define paths
        self.config_path = os.path.join(setup_path, 'robot.yaml')
        assert os.path.exists(self.config_path)

        # # Read YAML
        # self.config = read_yaml()
        # Parse YAML into config
        self.clearpath_config = ClearpathConfig(self.config_path)

        self.serial_number = self.clearpath_config.serial_number
        self.platform_model = self.clearpath_config.platform.get_platform_model()
        self.namespace = self.clearpath_config.system.namespace

        # Create updater
        self.updater = Updater(self)
        self.updater.setHardwareID(self.serial_number)

        # Subscribe to topics
        self.status_sub = self.create_subscription(
            Status,
            'platform/mcu/status',
            self.status_callback,
            qos_profile_sensor_data
        )

        self.camera_freq_bounds = {'min': 5, 'max': 10}
        self.lidar2d_freq_bounds = {'min': 5, 'max': 10}
        self.lidar3d_freq_bounds = {'min': 5, 'max': 10}

        for sensor in self.clearpath_config.sensors.get_all_sensors():
            self.add_sensor_diagnostic(sensor)

        # Check current firmware version
        cache = Cache()
        try:
            pkg = cache['ros-humble-clearpath-firmware']
            versions = pkg.versions
            newest: Version = versions[0]
            self.newest_firmware_version = newest.version.split('-')[0]
        except KeyError:
            self.get_logger().warn('ros-humble-clearpath-firmware package not found')
            self.newest_firmware_version = 'Not found'

        self.firmware_version = '0.0.0'
        self.battery_percentage = 0.0
        self.battery_voltage = 0.0

        # Add Diagnostic status
        self.updater.add('Firmware Version', self.check_firmware_version)

        self.updater.force_update()

    def status_callback(self, msg: Status):
        self.firmware_version = msg.firmware_version
        self.mcu_temperature = msg.mcu_temperature
        self.pcb_temperature = msg.pcb_temperature

    def check_firmware_version(self, stat: DiagnosticStatusWrapper):
        if self.newest_firmware_version == 'Not found':
            stat.summary(DiagnosticStatus.ERROR, 'ros-humble-clearpath-firmware package not found')
        elif self.firmware_version == self.newest_firmware_version:
            stat.summary(DiagnosticStatus.OK, f'Firmware is up to date (v{self.firmware_version})')
        elif self.firmware_version < self.newest_firmware_version:
            stat.summary(DiagnosticStatus.WARN, f'New firmware available. (v{self.firmware_version}) -> (v{self.newest_firmware_version})')
        else:
            stat.summary(DiagnosticStatus.WARN, 'ros-humble-clearpath-firmware package is outdated.')
        return stat

    def get_headerless_topic_diagnostic(self,
                                        sensor: BaseSensor,
                                        topic: str) -> HeaderlessTopicDiagnostic:
        sensor_topic = sensor.get_topic(topic, local=True)
        rate = sensor.get_topic_rate(topic)
        freq_bounds = FrequencyStatusParam({'min': rate, 'max': rate})
        return HeaderlessTopicDiagnostic(sensor_topic, self.updater, freq_bounds)

    def add_sensor_diagnostic(self, sensor: BaseSensor):
        diagnostics: List[tuple] = []

        if not sensor.launch_enabled:
            return

        match sensor:
            case IntelRealsense():
                if sensor.color_enabled:
                    diagnostics.append((
                        Image,
                        sensor.get_topic(IntelRealsense.TOPICS.COLOR_IMAGE, local=True),
                        self.get_headerless_topic_diagnostic(
                            sensor, IntelRealsense.TOPICS.COLOR_IMAGE)
                    ))
                if sensor.depth_enabled:
                    diagnostics.append((
                        Image,
                        sensor.get_topic(IntelRealsense.TOPICS.DEPTH_IMAGE, local=True),
                        self.get_headerless_topic_diagnostic(
                            sensor, IntelRealsense.TOPICS.DEPTH_IMAGE)
                    ))
                if sensor.pointcloud_enabled:
                    diagnostics.append((
                        PointCloud2,
                        sensor.get_topic(IntelRealsense.TOPICS.POINTCLOUD, local=True),
                        self.get_headerless_topic_diagnostic(
                            sensor, IntelRealsense.TOPICS.POINTCLOUD)
                    ))

            case BaseCamera():
                diagnostics.append((
                    Image,
                    sensor.get_topic(BaseCamera.TOPICS.COLOR_IMAGE, local=True),
                    self.get_headerless_topic_diagnostic(
                        sensor, BaseCamera.TOPICS.COLOR_IMAGE)
                ))

            case BaseLidar2D():
                diagnostics.append((
                  LaserScan,
                  sensor.get_topic(BaseLidar2D.TOPICS.SCAN, local=True),
                  self.get_headerless_topic_diagnostic(
                      sensor, BaseLidar2D.TOPICS.SCAN)
                ))

            case BaseLidar3D():
                diagnostics.append((
                  LaserScan,
                  sensor.get_topic(BaseLidar3D.TOPICS.SCAN, local=True),
                  self.get_headerless_topic_diagnostic(
                      sensor, BaseLidar3D.TOPICS.SCAN)
                ))
                diagnostics.append((
                    PointCloud2,
                    sensor.get_topic(BaseLidar3D.TOPICS.POINTS, local=True),
                    self.get_headerless_topic_diagnostic(
                        sensor, BaseLidar3D.TOPICS.POINTS)
                ))

            case BaseIMU():
                diagnostics.append((
                  Imu,
                  sensor.get_topic(BaseIMU.TOPICS.DATA, local=True),
                  self.get_headerless_topic_diagnostic(
                      sensor, BaseIMU.TOPICS.DATA)
                ))
                diagnostics.append((
                  MagneticField,
                  sensor.get_topic(BaseIMU.TOPICS.MAG, local=True),
                  self.get_headerless_topic_diagnostic(
                      sensor, BaseIMU.TOPICS.MAG)
                ))

            case BaseGPS():
                diagnostics.append((
                  NavSatFix,
                  sensor.get_topic(BaseGPS.TOPICS.FIX, local=True),
                  self.get_headerless_topic_diagnostic(
                      sensor, BaseGPS.TOPICS.FIX)
                ))

        for d in diagnostics:
            self.create_subscription(
                d[0],
                d[1],
                lambda msg: d[2].tick(),
                qos_profile_sensor_data
            )


def main():
    setup_path = BaseGenerator.get_args()

    rclpy.init()

    node = ClearpathDiagnosticUpdater(setup_path)
    rclpy.spin(node)

    node.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()

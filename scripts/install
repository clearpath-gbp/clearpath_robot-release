#!/usr/bin/env python3
# Software License Agreement (BSD)
#
# @author    Roni Kreinin <rkreinin@clearpathrobotics.com>
# @copyright (c) 2023, Clearpath Robotics, Inc., All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * Neither the name of Clearpath Robotics nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import pwd
import robot_upstart

from clearpath_config.clearpath_config import ClearpathConfig
from clearpath_config.common.types.platform import Platform
from clearpath_config.common.utils.yaml import read_yaml
from clearpath_generator_common.common import BaseGenerator

from ament_index_python.packages import get_package_share_directory

import os

import robot_upstart.providers


def replace_user_in_systemd_job(
    username: str,
    service_path: str,
) -> str:
    """
    Read a systemd job file, replace the username for jobs, and return the contents.

    :param username: The desired username to use as the owner of the job
    :param service_path: The path to the file to process
    :return: The same contents as the provided file, but with the username replaced to
        be the provided one
    """
    file_contents: str = ''
    with open(service_path, 'r') as f:
        for line in f.readlines():
            # Replace User with username from config
            if 'User=' in line:
                line = f'User={username}\n'
            file_contents += line
    return file_contents


class ClearpathRobotProvider(robot_upstart.providers.Systemd):
    """Same a the standard systemd provider, but with symlinks in clearpath_robot.wants."""

    def generate_install(self):
        files = super().generate_install()

        # replace the multi-user.target.wants items with clearpath-robot.service.wants
        multi_user_path = os.path.join(
            self.root, "etc/systemd/system/multi-user.target.wants", self.job.name + ".service")
        clearpath_robot_path = os.path.join(
            self.root, "etc/systemd/system/clearpath-robot.service.wants", self.job.name + ".service")
        files[clearpath_robot_path] = files[multi_user_path]
        files.pop(multi_user_path)
        return files


class VirtualCANProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        vcan_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-vcan.service')
        vcan_bridge_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/vcan')
        with open(vcan_service_path) as f:
            vcan_service_contents = f.read()
        with open(vcan_bridge_path) as f:
            vcan_bridge_contents = f.read()
        return {
            '/lib/systemd/system/clearpath-vcan.service': {
                'content': vcan_service_contents,
                'mode': 0o644
            },
            '/usr/sbin/clearpath-vcan-bridge': {
                'content': vcan_bridge_contents,
                'mode': 0o755
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-vcan.service': {
                'symlink': '/lib/systemd/system/clearpath-vcan.service'
            },
        }


class PlatformProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        platform_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-platform.service')
        platform_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            platform_service_path,
        )
        return {
            '/lib/systemd/system/clearpath-platform.service': {
                'content': platform_service_contents,
                'mode': 0o644
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-platform.service': {
                'symlink': '/lib/systemd/system/clearpath-platform.service'
            }
        }


class PlatformExtrasProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        platform_extras_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-platform-extras.service')
        platform_extras_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            platform_extras_service_path,
        )
        return {
            '/lib/systemd/system/clearpath-platform-extras.service': {
                'content': platform_extras_service_contents,
                'mode': 0o644
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-platform-extras.service': {  # noqa: E501
                'symlink': '/lib/systemd/system/clearpath-platform-extras.service'
            }
        }


class SensorsProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        sensors_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-sensors.service')
        sensors_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            sensors_service_path,
        )
        return {
            '/lib/systemd/system/clearpath-sensors.service': {
                'content': sensors_service_contents,
                'mode': 0o644
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-sensors.service': {
                'symlink': '/lib/systemd/system/clearpath-sensors.service'
            }
        }


class ManipulatorsProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        manipulators_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-manipulators.service')
        manipulators_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            manipulators_service_path,
        )
        return {
            '/lib/systemd/system/clearpath-manipulators.service': {
                'content': manipulators_service_contents,
                'mode': 0o644
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-manipulators.service': {
                'symlink': '/lib/systemd/system/clearpath-manipulators.service'
            }
        }


class DiscoveryServerProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        discovery_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-discovery.service')
        discovery_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            discovery_service_path,
        )
        return {
            '/lib/systemd/system/clearpath-discovery.service': {
                'content': discovery_service_contents,
                'mode': 0o644
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-discovery.service': {
                'symlink': '/lib/systemd/system/clearpath-discovery.service'
            }
        }


class ZenohRouterServiceProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        zenoh_router_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-zenoh-router.service')
        zenoh_router_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            zenoh_router_service_path,
        )
        return {
                '/lib/systemd/system/clearpath-zenoh-router.service': {
                    'content': zenoh_router_service_contents,
                    'mode': 0o644
                },
                '/etc/systemd/system/clearpath-robot.service.wants/clearpath-zenoh-router.service': {
                    'symlink': '/lib/systemd/system/clearpath-zenoh-router.service'
                }
            }


class RobotProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        robot_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-robot.service')
        robot_service_execpre_contents_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/generate')
        robot_service_exec_contents_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/check')

        robot_service_contents = replace_user_in_systemd_job(
            clearpath_config.system.username,
            robot_service_path
        )
        with open(robot_service_execpre_contents_path) as f:
            robot_service_execpre_contents = f.read()
        with open(robot_service_exec_contents_path) as f:
            robot_service_exec_contents = f.read()
        return {
            '/lib/systemd/system/clearpath-robot.service': {
                'content': robot_service_contents,
                'mode': 0o644
            },
            '/usr/sbin/clearpath-robot-generate': {
                'content': robot_service_execpre_contents,
                'mode': 0o755
            },
            '/usr/sbin/clearpath-robot-check': {
                'content': robot_service_exec_contents,
                'mode': 0o755
            },
            '/etc/systemd/system/multi-user.target.wants/clearpath-robot.service': {
                'symlink': '/lib/systemd/system/clearpath-robot.service'
            },
        }

class ShutdownProvider(robot_upstart.providers.Generic):
    def post_install(self):
        pass

    def generate_install(self):
        shutdown_service_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'services/clearpath-shutdown.service')
        shutdown_script_path = os.path.join(
            get_package_share_directory('clearpath_robot'),
            'scripts/shutdown.py')
        with open(shutdown_service_path) as f:
            shutdown_service_contents = f.read()
        with open(shutdown_script_path) as f:
            shutdown_script_contents = f.read()
        return {
            '/lib/systemd/system/clearpath-shutdown.service': {
                'content': shutdown_service_contents,
                'mode': 0o644
            },
            '/usr/sbin/clearpath-shutdown': {
                'content': shutdown_script_contents,
                'mode': 0o755
            },
            '/etc/systemd/system/clearpath-robot.service.wants/clearpath-shutdown.service': {
                'symlink': '/lib/systemd/system/clearpath-shutdown.service'
            },
        }

setup_path = BaseGenerator.get_args()
workspace_setup = os.path.join(setup_path, 'setup.bash')
config_path = os.path.join(setup_path, 'robot.yaml')
platform_service_launch = os.path.join(
    setup_path,
    'platform/launch/platform-service.launch.py')
platform_extras_service_launch = os.path.join(
    setup_path,
    'platform-extras/launch/platform-extras-service.launch.py')
sensors_service_launch = os.path.join(
    setup_path,
    'sensors/launch/sensors-service.launch.py')
manipulators_service_launch = os.path.join(
    setup_path,
    'manipulators/launch/manipulators-service.launch.py')

# Read YAML
config = read_yaml(config_path)
# Parse YAML into config
clearpath_config = ClearpathConfig(config)
rmw = clearpath_config.system.middleware.rmw_implementation
domain_id = clearpath_config.system.domain_id

# Check that user exists
try:
    pwd.getpwnam(clearpath_config.system.username)
except:  # noqa: E722
    print(
        f'Error. User "{clearpath_config.system.username}" does not exist.\n'
        f'Modify the "robot.yaml" system.username entry to match an existing user.'
    )
    exit(1)

# Create Dummy Launch
if not os.path.isfile(platform_service_launch):
    os.makedirs(os.path.dirname(platform_service_launch), exist_ok=True)
    open(platform_service_launch, 'w+').close()
if not os.path.isfile(platform_extras_service_launch):
    os.makedirs(os.path.dirname(platform_extras_service_launch), exist_ok=True)
    open(platform_extras_service_launch, 'w+').close()
if not os.path.isfile(sensors_service_launch):
    os.makedirs(os.path.dirname(sensors_service_launch), exist_ok=True)
    open(sensors_service_launch, 'w+').close()
if not os.path.isfile(manipulators_service_launch):
    os.makedirs(os.path.dirname(manipulators_service_launch), exist_ok=True)
    open(manipulators_service_launch, 'w+').close()

# Robot
# this should be first, as subsequent jobs are part of this service
robot = robot_upstart.Job(workspace_setup=workspace_setup)
robot.install(Provider=RobotProvider)

# Platform
platform = robot_upstart.Job(
    name='clearpath-platform',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

platform.symlink = True
platform.add(filename=platform_service_launch)
platform.install(Provider=ClearpathRobotProvider)

platform_provider_files = robot_upstart.Job(workspace_setup=workspace_setup)
platform_provider_files.install(Provider=PlatformProvider)

# Platform extras
platform_extras = robot_upstart.Job(
    name='clearpath-platform-extras',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

platform_extras.symlink = True
platform_extras.add(filename=platform_extras_service_launch)
platform_extras.install(Provider=ClearpathRobotProvider)

platform_extras_provider_files = robot_upstart.Job(workspace_setup=workspace_setup)
platform_extras_provider_files.install(Provider=PlatformExtrasProvider)

# Sensors
sensors = robot_upstart.Job(
    name='clearpath-sensors',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

sensors.symlink = True
sensors.add(filename=sensors_service_launch)
sensors.install(Provider=ClearpathRobotProvider)

sensors_provider_files = robot_upstart.Job(workspace_setup=workspace_setup)
sensors_provider_files.install(Provider=SensorsProvider)

# Manipulators
manipulators = robot_upstart.Job(
    name='clearpath-manipulators',
    rmw=rmw,
    workspace_setup=workspace_setup,
    ros_domain_id=domain_id)

manipulators.symlink = True
manipulators.add(filename=manipulators_service_launch)
manipulators.install(Provider=ClearpathRobotProvider)

manipulators_provider_files = robot_upstart.Job(workspace_setup=workspace_setup)
manipulators_provider_files.install(Provider=ManipulatorsProvider)

# Discovery Server
discovery_server = robot_upstart.Job(workspace_setup=workspace_setup)
discovery_server.install(Provider=DiscoveryServerProvider)

# Zenoh Router
zenoh_router = robot_upstart.Job(workspace_setup=workspace_setup)
zenoh_router.install(Provider=ZenohRouterServiceProvider)

# Virtual CAN Bridge
vcan_bridge = robot_upstart.Job(workspace_setup=workspace_setup)
vcan_bridge.install(Provider=VirtualCANProvider)

# Shutdown script
shutdown = robot_upstart.Job(workspace_setup=workspace_setup)
shutdown.install(Provider=ShutdownProvider)

print("""

** INSTALLATION COMPLETE **

To finalize installation please run the following command:

    sudo systemctl daemon-reload && sudo systemctl start clearpath-robot

""")
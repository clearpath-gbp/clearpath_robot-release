sick_scan:
  ros__parameters:
    intensity: false
    intensity_resolution_16bit: false
    min_ang: -2.35619
    max_ang: 2.35619
    frame_id: cloud
    use_binary_protocol: true
    scanner_type: sick_lms_1xx
    
    #  Optional range filter configuration: If the range of a scan point is less than range_min or greater than range_max, the point can be filtered. 
    #  Depending on parameter range_filter_handling, the following filter can be applied for points with a range not within [range_min, range_max],   
    #  see enumeration RangeFilterResultHandling in range_filter.h:                                           
    #    0: RANGE_FILTER_DEACTIVATED,  do not apply range filter (default)                                    
    #    1: RANGE_FILTER_DROP,         drop point, if range is not within [range_min, range_max]              
    #    2: RANGE_FILTER_TO_ZERO,      set range to 0, if range is not within [range_min, range_max]          
    #    3: RANGE_FILTER_TO_RANGE_MAX, set range to range_max, if range is not within [range_min, range_max]  
    #    4: RANGE_FILTER_TO_FLT_MAX,   set range to FLT_MAX, if range is not within [range_min, range_max]    
    #    5: RANGE_FILTER_TO_NAN        set range to NAN, if range is not within [range_min, range_max]        
    #  Note: Range filter applies only to Pointcloud messages, not to LaserScan messages.                     
    #  Using range_filter_handling 4 or 5 requires handling of FLT_MAX and NAN values in an application.      
    range_min: 0.05
    range_max: 25.0
    range_filter_handling: 0
    
    hostname: 192.168.0.1
    cloud_topic: cloud
    port: 2112
    timelimit: 5
    sw_pll_only_publish: true
    use_generation_timestamp: true # Use the lidar generation timestamp (true, default) or send timestamp (false) for the software pll converted message timestamp 
    start_services: true #  start ros service for cola commands 
    activate_lferec: true # activate field monitoring by lferec messages 
    activate_lidoutputstate: true #  activate field monitoring by lidoutputstate messages 
    activate_lidinputstate: true # activate field monitoring by lidinputstate messages 
    min_intensity: 0.0 # Set range of LaserScan messages to infinity, if intensity < min_intensity (default: 0) 

    ang_res: 0.5 #  Supported values are "0.25" and "0.50" 
    scan_freq: 50 #  Supported values are "25" and "50" 
    #  Note: angular resolution and scanning frequency of a LMS111 can be configured by parameter "ang_res" (values "0.25" or "0.5") and "scan_freq"  (values "25" or "50") 
    #  After setting "ang_res" and "scan_freq", it takes ca. 30 seconds until the pointcloud is published. 
    #  Recommendation: It is recommended to specify the desired angular resolution and scan rate in this launch file. 
    #  In this case, it is necessary to wait approx. 30 sec. until the Lidar changes to status "OK". 
    #  Alternatively, these settings can be configured in SOPAS-ET, transferred to the EEProm of the lidar and 
    #  then permanently stored. In this case, the explicit specification of scan rate and angular resolution 
    #  can be omitted and the waiting time can be avoided.   

    #  Apply an additional transform to the cartesian pointcloud, default: "0,0,0,0,0,0" (i.e. no transform) 
    #  Note: add_transform_xyz_rpy is specified by 6D pose x, y, z, roll, pitch, yaw in [m] resp. [rad] 
    #  It transforms a 3D point in cloud coordinates to 3D point in user defined world coordinates:  
    #  add_transform_xyz_rpy := T[world,cloud] with parent "world" and child "cloud", i.e. P_world = T[world,cloud] * P_cloud 
    #  The additional transform applies to cartesian lidar pointclouds and visualization marker (fields) 
    #  It is NOT applied to polar pointclouds, radarscans, ldmrs objects or other messages 
    add_transform_xyz_rpy: "0,0,0,0,0,0" 
    add_transform_check_dynamic_updates: false

    message_monitoring_enabled: true       #  Enable message monitoring with reconnect+reinit in case of timeouts, default: true 
    read_timeout_millisec_default: 5000     #  5 sec read timeout in operational mode (measurement mode), default: 5000 milliseconds 
    read_timeout_millisec_startup: 120000   #  120 sec read timeout during startup (sensor may be starting up, which can take up to 120 sec.), default: 120000 milliseconds 
    read_timeout_millisec_kill_node: 150000 #  150 sec pointcloud timeout, ros node will be killed if no point cloud published within the last 150 sec., default: 150000 milliseconds 
    client_authorization_pw: F4724744    #  Default password for client authorization 

    #  Configuration of ROS quality of service: 
    #  On ROS-1, parameter "ros_qos" sets the queue_size of ros publisher 
    #  On ROS-2, parameter "ros_qos" sets the QoS of ros publisher to one of the following predefined values: 
    #  0: rclcpp::SystemDefaultsQoS(), 1: rclcpp::ParameterEventsQoS(), 2: rclcpp::ServicesQoS(), 3: rclcpp::ParametersQoS(), 4: rclcpp::SensorDataQoS() 
    #  See e.g. https://docs.ros2.org/dashing/api/rclcpp/classrclcpp_1_1QoS.html#ad7e932d8e2f636c80eff674546ec3963 for further details about ROS2 QoS 
    #  Default value is -1, i.e. queue_size=10 on ROS-1 resp. qos=rclcpp::SystemDefaultsQoS() on ROS-2 is used.
    ros_qos: -1